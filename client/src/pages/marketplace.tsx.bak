import { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useLocation } from 'wouter';
import type { MissionView } from '@shared/types';
import { dataApi } from '@/lib/api/services';
import { MissionCard } from '@/components/missions/mission-card';
import { SystemStatusBanner } from '@/components/ui/system-status-banner';
import { Badge } from '@/components/ui/badge';
import { categories } from '@/lib/categories';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import MissionMatchingEngine from '@/components/ai/mission-matching-engine';
import { useAuth } from '@/hooks/use-auth';
import * as LucideIcons from 'lucide-react'; // Import LucideIcons

// Utiliser le type normalis√© MissionView qui inclut d√©j√† les bids
type MissionWithBids = MissionView;

export default function Marketplace() {
  const { user } = useAuth();
  const [, setLocation] = useLocation();
  const [showAIMatching, setShowAIMatching] = useState(false);
  const [showFilters, setShowFilters] = useState(false);
  const [showCategories, setShowCategories] = useState(false);
  const [retryCount, setRetryCount] = useState(0);
  const [lastRetryTime, setLastRetryTime] = useState<number>(0);
  const [filters, setFilters] = useState({
    category: 'all',
    budget: 'all',
    location: '',
    sort: 'newest',
    teamOnly: false,
    serviceType: 'all', // 'all', 'reverse-bidding', 'direct-connection'
  });

  const { data: missionsResponse, isLoading, error, refetch } = useQuery({
    queryKey: ['/api/missions'],
    queryFn: async () => {
      console.log('üîÑ D√©but requ√™te missions API avec mappers...');

      try {
        // Utiliser le service API centralis√© avec mappers
        const result = await dataApi.feed.getMissions();
        console.log('‚úÖ Missions normalis√©es r√©cup√©r√©es:', result.missions.length);
        return result;
      } catch (networkError) {
        console.error('‚ùå Erreur r√©seau:', networkError);
        // Retourner des donn√©es de fallback au lieu de throw
        return {
          missions: [],
          metadata: {
            total: 0,
            has_errors: true,
            error_message: `Erreur r√©seau: ${networkError instanceof Error ? networkError.message : 'Unknown error'}`,
            fallback_mode: true
          }
        };
      }
    },
    refetchInterval: 120000, // 2 minutes pour r√©duire la charge
    retry: (failureCount, error) => {
      console.log(`üîÑ Tentative ${failureCount + 1}/3 apr√®s erreur:`, error);
      return failureCount < 2; // Maximum 3 tentatives
    },
    retryDelay: attemptIndex => {
      const delay = Math.min(1000 * Math.pow(2, attemptIndex), 10000);
      console.log(`‚è≥ Retry dans ${delay}ms`);
      return delay;
    },
    staleTime: 60000, // Cache valide 1 minute
    gcTime: 300000, // Garder en cache 5 minutes
    refetchOnWindowFocus: false,
    meta: {
      errorPolicy: 'soft' // Ne pas propager les erreurs, utiliser les fallbacks
    }
  });

  // Extraire les missions et m√©tadonn√©es de mani√®re s√©curis√©e
  const missions = missionsResponse?.missions || [];
  const metadata = missionsResponse?.metadata || { total: 0 };
  const isFallbackMode = metadata.fallback_mode || false;

  console.log('üè™ Marketplace - √âtat actuel:', { 
    missionsCount: missions.length, 
    isLoading, 
    hasError: !!error,
    errorMessage: error?.message 
  });

  // DEBUG: Afficher les missions brutes
  if (missions.length > 0) {
    console.log('üîç DEBUG - Premi√®re mission brute:', missions[0]);
    console.log('üîç DEBUG - Filtres actifs:', filters);
  }

  // Retry automatique intelligent
  useEffect(() => {
    if (error && !isLoading && retryCount < 3) {
      const now = Date.now();
      const timeSinceLastRetry = now - lastRetryTime;
      const minRetryInterval = 5000; // 5 secondes minimum entre les tentatives

      if (timeSinceLastRetry > minRetryInterval) {
        const retryDelay = Math.min(2000 * Math.pow(2, retryCount), 10000); // Backoff exponentiel

        console.log(`üîÑ Retry automatique #${retryCount + 1} dans ${retryDelay}ms`);

        const timeoutId = setTimeout(() => {
          console.log(`üîÑ Ex√©cution retry automatique #${retryCount + 1}`);
          setRetryCount(prev => prev + 1);
          setLastRetryTime(Date.now());
          refetch();
        }, retryDelay);

        return () => clearTimeout(timeoutId);
      }
    }
  }, [error, isLoading, retryCount, lastRetryTime, refetch]);

  // Reset retry counter en cas de succ√®s
  useEffect(() => {
    if (!error && !isLoading && missions.length > 0) {
      setRetryCount(0);
    }
  }, [error, isLoading, missions.length]);

  const filteredAndSortedMissions = missions
    .filter((mission: MissionWithBids) => {
      // DEBUG: Logger chaque mission filtr√©e
      const categoryPass = !filters.category || filters.category === 'all' || mission.category === filters.category;
      const locationPass = !filters.location || mission.location?.toLowerCase().includes(filters.location.toLowerCase());
      const teamPass = !filters.teamOnly || mission.is_team_mission || mission.isTeamMode;
      const serviceTypePass = filters.serviceType === 'all' || 
        (filters.serviceType === 'reverse-bidding' && mission.service_type === 'reverse-bidding') ||
        (filters.serviceType === 'direct-connection' && mission.service_type === 'direct-connection');

      if (!categoryPass) {
        console.log(`‚ùå Mission ${mission.id} filtr√©e - cat√©gorie: ${mission.category} vs ${filters.category}`);
      }
      if (!locationPass) {
        console.log(`‚ùå Mission ${mission.id} filtr√©e - location: ${mission.location} vs ${filters.location}`);
      }
      if (!teamPass) {
        console.log(`‚ùå Mission ${mission.id} filtr√©e - team`);
      }
      if (!serviceTypePass) {
        console.log(`‚ùå Mission ${mission.id} filtr√©e - serviceType: ${mission.service_type} vs ${filters.serviceType}`);
      }

      if (filters.category && filters.category !== 'all' && mission.category !== filters.category) return false;
      if (filters.location && !mission.location?.toLowerCase().includes(filters.location.toLowerCase())) return false;
      if (filters.teamOnly && !mission.is_team_mission && !mission.isTeamMode) return false;
      if (filters.serviceType !== 'all' && mission.service_type !== filters.serviceType) return false;
      if (filters.budget && filters.budget !== 'all') {
        // Utiliser budget_value_cents converti en euros
        const budgetEuros = mission.budget_value_cents ? mission.budget_value_cents / 100 : 0;
        switch (filters.budget) {
          case '0-500':
            return budgetEuros >= 0 && budgetEuros <= 500;
          case '500-2000':
            return budgetEuros > 500 && budgetEuros <= 2000;
          case '2000-5000':
            return budgetEuros > 2000 && budgetEuros <= 5000;
          case '5000+':
            return budgetEuros > 5000;
          default:
            return true;
        }
      }
      return true;
    })
    .sort((a: MissionWithBids, b: MissionWithBids) => {
      switch (filters.sort) {
        case 'newest':
          return new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime();
        case 'budget-high':
          return b.budget - a.budget; // D√©j√† normalis√©s en nombre par le mapper
        case 'budget-low':
          return a.budget - b.budget; // D√©j√† normalis√©s en nombre par le mapper
        case 'bids':
          return b.bids.length - a.bids.length;
        default:
          return 0;
      }
    });

  const handleFilterChange = (key: string, value: string) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  };

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-8">
      <div className="mb-6 sm:mb-8">
        <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-2 sm:mb-4">
          Marketplace des Projets
        </h1>

        {/* Banni√®re de statut syst√®me */}
        <SystemStatusBanner
          isLoading={isLoading}
          hasError={!!error && !isFallbackMode}
          isFallbackMode={isFallbackMode}
          errorMessage={metadata?.error_message}
          onRetry={() => {
            console.log('üîÑ Retry depuis la banni√®re');
            refetch();
          }}
          className="mb-4"
        />
      </div>

      <div className="mb-6">
        {/* Bulles de type de service */}
        <div className="mb-4">
          <div className="flex flex-wrap gap-3">
            <Badge
              variant={filters.serviceType === 'all' ? 'default' : 'outline'}
              className={`cursor-pointer px-4 py-2.5 rounded-full transition-all duration-300 flex items-center gap-2 font-medium shadow-sm hover:shadow-md ${
                filters.serviceType === 'all' 
                  ? 'bg-gradient-to-r from-purple-600 to-purple-700 text-white scale-105 border-2 border-purple-400' 
                  : 'bg-white hover:bg-purple-50 border-2 border-gray-200 hover:border-purple-300'
              }`}
              onClick={() => handleFilterChange('serviceType', 'all')}
            >
              <span className="text-base">‚ú®</span>
              <span className="text-sm">Tous les services</span>
            </Badge>
            <Badge
              variant={filters.serviceType === 'reverse-bidding' ? 'default' : 'outline'}
              className={`cursor-pointer px-4 py-2.5 rounded-full transition-all duration-300 flex items-center gap-2 font-medium shadow-sm hover:shadow-md ${
                filters.serviceType === 'reverse-bidding' 
                  ? 'bg-gradient-to-r from-purple-600 to-purple-700 text-white scale-105 border-2 border-purple-400' 
                  : 'bg-white hover:bg-purple-50 border-2 border-gray-200 hover:border-purple-300'
              }`}
              onClick={() => handleFilterChange('serviceType', 'reverse-bidding')}
            >
              <LucideIcons.Gavel className={`w-4 h-4 ${filters.serviceType === 'reverse-bidding' ? 'text-white' : 'text-purple-600'}`} />
              <span className="text-sm">Appels d'offres</span>
            </Badge>
            <Badge
              variant={filters.serviceType === 'direct-connection' ? 'default' : 'outline'}
              className={`cursor-pointer px-4 py-2.5 rounded-full transition-all duration-300 flex items-center gap-2 font-medium shadow-sm hover:shadow-md ${
                filters.serviceType === 'direct-connection' 
                  ? 'bg-gradient-to-r from-purple-600 to-purple-700 text-white scale-105 border-2 border-purple-400' 
                  : 'bg-white hover:bg-purple-50 border-2 border-gray-200 hover:border-purple-300'
              }`}
              onClick={() => handleFilterChange('serviceType', 'direct-connection')}
            >
              <LucideIcons.Users className={`w-4 h-4 ${filters.serviceType === 'direct-connection' ? 'text-white' : 'text-purple-600'}`} />
              <span className="text-sm">Mise en relation</span>
            </Badge>
          </div>
        </div>

        {/* Bulles de cat√©gories avec syst√®me r√©tractable */}
        <div className="mb-4">
          <div className="flex flex-wrap gap-3 items-start">
            {/* Bulle principale "Cat√©gories" */}
            <Badge
              variant="outline"
              className={`cursor-pointer px-5 py-3 rounded-full transition-all duration-300 flex items-center gap-2 font-semibold shadow-md hover:shadow-lg ${
                showCategories 
                  ? 'bg-gradient-to-r from-indigo-600 to-indigo-700 text-white border-2 border-indigo-400 scale-105' 
                  : 'bg-white hover:bg-indigo-50 border-2 border-indigo-300 hover:border-indigo-400'
              }`}
              onClick={() => setShowCategories(!showCategories)}
            >
              <LucideIcons.Filter className={`w-5 h-5 ${showCategories ? 'text-white' : 'text-indigo-600'}`} />
              <span className="text-sm">
                {filters.category !== 'all' 
                  ? categories.find(c => c.id === filters.category)?.name || 'Cat√©gories'
                  : 'Cat√©gories'}
              </span>
              {showCategories ? (
                <LucideIcons.ChevronUp className="w-4 h-4" />
              ) : (
                <LucideIcons.ChevronDown className="w-4 h-4" />
              )}
              {filters.category !== 'all' && (
                <span className="ml-1 w-2 h-2 bg-white rounded-full"></span>
              )}
            </Badge>

            {/* Cat√©gories expandables avec animation */}
            <div className={`flex flex-wrap gap-3 transition-all duration-500 ease-in-out origin-left ${
              showCategories 
                ? 'opacity-100 scale-100 max-h-96' 
                : 'opacity-0 scale-95 max-h-0 overflow-hidden pointer-events-none'
            }`}>
              <Badge
                variant={filters.category === 'all' ? 'default' : 'outline'}
                className={`cursor-pointer px-4 py-2.5 rounded-full transition-all duration-300 flex items-center gap-2 font-medium shadow-sm hover:shadow-md ${
                  filters.category === 'all' 
                    ? 'bg-gradient-to-r from-blue-600 to-blue-700 text-white scale-105 border-2 border-blue-400' 
                    : 'bg-white hover:bg-blue-50 border-2 border-gray-200 hover:border-blue-300'
                }`}
                onClick={() => {
                  handleFilterChange('category', 'all');
                  setShowCategories(false);
                }}
                style={{ 
                  animationDelay: '0ms',
                  animation: showCategories ? 'slideIn 300ms ease-out forwards' : 'none'
                }}
              >
                <span className="text-base">üîç</span>
                <span className="text-sm">Toutes</span>
              </Badge>
              
              {categories.map((category, index) => {
                const IconComponent = (LucideIcons as any)[category.icon] || LucideIcons.Circle;
                const isActive = filters.category === category.id;
                return (
                  <Badge
                    key={category.id}
                    variant={isActive ? 'default' : 'outline'}
                    className={`cursor-pointer px-4 py-2.5 rounded-full transition-all duration-300 flex items-center gap-2 font-medium shadow-sm hover:shadow-md ${
                      isActive 
                        ? 'bg-gradient-to-r from-blue-600 to-blue-700 text-white scale-105 border-2 border-blue-400' 
                        : 'bg-white hover:bg-blue-50 border-2 border-gray-200 hover:border-blue-300'
                    }`}
                    onClick={() => {
                      handleFilterChange('category', category.id);
                      setShowCategories(false);
                    }}
                    style={{ 
                      animationDelay: `${(index + 1) * 50}ms`,
                      animation: showCategories ? 'slideIn 300ms ease-out forwards' : 'none'
                    }}
                  >
                    <IconComponent className={`w-4 h-4 ${isActive ? 'text-white' : category.color}`} />
                    <span className="text-sm">{category.name}</span>
                  </Badge>
                );
              })}
            </div>
          </div>
        </div>

        {/* Bulles de filtres ville et budget avec syst√®me r√©tractable */}
        <div className="mb-4">
          <div className="flex flex-wrap gap-3 items-start">
            {/* Bulle principale "Localisation" */}
            <Badge
              variant="outline"
              className={`cursor-pointer px-5 py-3 rounded-full transition-all duration-300 flex items-center gap-2 font-semibold shadow-md hover:shadow-lg ${
                showFilters 
                  ? 'bg-gradient-to-r from-emerald-600 to-emerald-700 text-white border-2 border-emerald-400 scale-105' 
                  : 'bg-white hover:bg-emerald-50 border-2 border-emerald-300 hover:border-emerald-400'
              }`}
              onClick={() => setShowFilters(!showFilters)}
            >
              <LucideIcons.MapPin className={`w-5 h-5 ${showFilters ? 'text-white' : 'text-emerald-600'}`} />
              <span className="text-sm">
                {filters.location 
                  ? `${filters.location.substring(0, 15)}${filters.location.length > 15 ? '...' : ''}`
                  : 'Localisation & Budget'}
              </span>
              {showFilters ? (
                <LucideIcons.ChevronUp className="w-4 h-4" />
              ) : (
                <LucideIcons.ChevronDown className="w-4 h-4" />
              )}
              {(filters.location || filters.budget !== 'all') && (
                <span className="ml-1 w-2 h-2 bg-white rounded-full"></span>
              )}
            </Badge>

            {/* Filtres expandables avec animation */}
            <div className={`flex flex-wrap gap-3 transition-all duration-500 ease-in-out origin-left ${
              showFilters 
                ? 'opacity-100 scale-100 max-h-96' 
                : 'opacity-0 scale-95 max-h-0 overflow-hidden pointer-events-none'
            }`}>
              {/* Champ ville */}
              <div className="flex items-center gap-2 bg-white border-2 border-gray-200 rounded-full px-4 py-2.5 shadow-sm hover:shadow-md transition-all duration-300 hover:border-emerald-300"
                style={{ 
                  animationDelay: '0ms',
                  animation: showFilters ? 'slideIn 300ms ease-out forwards' : 'none'
                }}
              >
                <LucideIcons.MapPin className="w-4 h-4 text-emerald-600" />
                <Input
                  type="text"
                  placeholder="Ville, r√©gion..."
                  value={filters.location}
                  onChange={(e) => handleFilterChange('location', e.target.value)}
                  className="border-0 focus-visible:ring-0 focus-visible:ring-offset-0 h-6 text-sm p-0 w-32"
                />
                {filters.location && (
                  <button
                    onClick={() => handleFilterChange('location', '')}
                    className="hover:bg-gray-100 rounded-full p-1"
                  >
                    <LucideIcons.X className="w-3 h-3 text-gray-500" />
                  </button>
                )}
              </div>

              {/* Badges de budget */}
              <Badge
                variant={filters.budget === 'all' ? 'default' : 'outline'}
                className={`cursor-pointer px-4 py-2.5 rounded-full transition-all duration-300 flex items-center gap-2 font-medium shadow-sm hover:shadow-md ${
                  filters.budget === 'all' 
                    ? 'bg-gradient-to-r from-green-600 to-green-700 text-white scale-105 border-2 border-green-400' 
                    : 'bg-white hover:bg-green-50 border-2 border-gray-200 hover:border-green-300'
                }`}
                onClick={() => {
                  handleFilterChange('budget', 'all');
                  setShowFilters(false);
                }}
                style={{ 
                  animationDelay: '50ms',
                  animation: showFilters ? 'slideIn 300ms ease-out forwards' : 'none'
                }}
              >
                <LucideIcons.Euro className={`w-4 h-4 ${filters.budget === 'all' ? 'text-white' : 'text-green-600'}`} />
                <span className="text-sm">Tous budgets</span>
              </Badge>

              <Badge
                variant={filters.budget === '0-500' ? 'default' : 'outline'}
                className={`cursor-pointer px-4 py-2.5 rounded-full transition-all duration-300 flex items-center gap-2 font-medium shadow-sm hover:shadow-md ${
                  filters.budget === '0-500' 
                    ? 'bg-gradient-to-r from-green-600 to-green-700 text-white scale-105 border-2 border-green-400' 
                    : 'bg-white hover:bg-green-50 border-2 border-gray-200 hover:border-green-300'
                }`}
                onClick={() => {
                  handleFilterChange('budget', '0-500');
                  setShowFilters(false);
                }}
                style={{ 
                  animationDelay: '100ms',
                  animation: showFilters ? 'slideIn 300ms ease-out forwards' : 'none'
                }}
              >
                <span className="text-sm">0 - 500‚Ç¨</span>
              </Badge>

              <Badge
                variant={filters.budget === '500-2000' ? 'default' : 'outline'}
                className={`cursor-pointer px-4 py-2.5 rounded-full transition-all duration-300 flex items-center gap-2 font-medium shadow-sm hover:shadow-md ${
                  filters.budget === '500-2000' 
                    ? 'bg-gradient-to-r from-green-600 to-green-700 text-white scale-105 border-2 border-green-400' 
                    : 'bg-white hover:bg-green-50 border-2 border-gray-200 hover:border-green-300'
                }`}
                onClick={() => {
                  handleFilterChange('budget', '500-2000');
                  setShowFilters(false);
                }}
                style={{ 
                  animationDelay: '150ms',
                  animation: showFilters ? 'slideIn 300ms ease-out forwards' : 'none'
                }}
              >
                <span className="text-sm">500‚Ç¨ - 2 000‚Ç¨</span>
              </Badge>

              <Badge
                variant={filters.budget === '2000-5000' ? 'default' : 'outline'}
                className={`cursor-pointer px-4 py-2.5 rounded-full transition-all duration-300 flex items-center gap-2 font-medium shadow-sm hover:shadow-md ${
                  filters.budget === '2000-5000' 
                    ? 'bg-gradient-to-r from-green-600 to-green-700 text-white scale-105 border-2 border-green-400' 
                    : 'bg-white hover:bg-green-50 border-2 border-gray-200 hover:border-green-300'
                }`}
                onClick={() => {
                  handleFilterChange('budget', '2000-5000');
                  setShowFilters(false);
                }}
                style={{ 
                  animationDelay: '200ms',
                  animation: showFilters ? 'slideIn 300ms ease-out forwards' : 'none'
                }}
              >
                <span className="text-sm">2 000‚Ç¨ - 5 000‚Ç¨</span>
              </Badge>

              <Badge
                variant={filters.budget === '5000+' ? 'default' : 'outline'}
                className={`cursor-pointer px-4 py-2.5 rounded-full transition-all duration-300 flex items-center gap-2 font-medium shadow-sm hover:shadow-md ${
                  filters.budget === '5000+' 
                    ? 'bg-gradient-to-r from-green-600 to-green-700 text-white scale-105 border-2 border-green-400' 
                    : 'bg-white hover:bg-green-50 border-2 border-gray-200 hover:border-green-300'
                }`}
                onClick={() => {
                  handleFilterChange('budget', '5000+');
                  setShowFilters(false);
                }}
                style={{ 
                  animationDelay: '250ms',
                  animation: showFilters ? 'slideIn 300ms ease-out forwards' : 'none'
                }}
              >
                <span className="text-sm">5 000‚Ç¨+</span>
              </Badge>

              {/* Bouton de r√©initialisation */}
              {(filters.location || filters.budget !== 'all') && (
                <Badge
                  variant="outline"
                  className="cursor-pointer px-4 py-2.5 rounded-full transition-all duration-300 flex items-center gap-2 font-medium shadow-sm hover:shadow-md bg-white hover:bg-red-50 border-2 border-gray-200 hover:border-red-300"
                  onClick={() => {
                    handleFilterChange('location', '');
                    handleFilterChange('budget', 'all');
                    setShowFilters(false);
                  }}
                  style={{ 
                    animationDelay: '300ms',
                    animation: showFilters ? 'slideIn 300ms ease-out forwards' : 'none'
                  }}
                >
                  <LucideIcons.X className="w-4 h-4 text-red-600" />
                  <span className="text-sm text-red-600">R√©initialiser</span>
                </Badge>
              )}
            </div>
          </div>
        </div>

        
      </div>

      <div className="lg:w-3/4 w-full">
        <div className="flex flex-col sm:flex-row justify-between items-center mb-6">
          <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4 mb-4 sm:mb-0">
            {/* Indicateurs de sant√© du syst√®me - uniquement mode chargement et mode d√©grad√© */}
            <div className="flex items-center gap-2">
              {isLoading && (
                <div className="flex items-center gap-2 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                  Chargement...
                </div>
              )}

              {isFallbackMode && (
                <div className="flex items-center gap-2 px-3 py-1 bg-orange-100 text-orange-800 rounded-full text-sm">
                  <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
                  Mode d√©grad√©
                </div>
              )}
            </div>
          </div>
          <div className="flex flex-col sm:flex-row items-center space-y-2 sm:space-y-0 sm:space-x-3 w-full sm:w-auto">
            {user?.type === 'provider' && (
              <Button
                onClick={() => setShowAIMatching(!showAIMatching)}
                className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 w-full sm:w-auto"
              >
                ü§ñ Matching IA
              </Button>
            )}
            <div className="flex items-center space-x-2 w-full sm:w-auto">
              <span className="text-sm text-gray-500 whitespace-nowrap">Trier par:</span>
              <Select value={filters.sort} onValueChange={(value) => handleFilterChange('sort', value)}>
                <SelectTrigger className="w-full sm:w-40">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="newest">Plus r√©cent</SelectItem>
                  <SelectItem value="budget-high">Budget d√©croissant</SelectItem>
                  <SelectItem value="budget-low">Budget croissant</SelectItem>
                  <SelectItem value="bids">Nombre d'offres</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>

        {showAIMatching && user?.type === 'provider' && (
          <div className="mb-8">
            <MissionMatchingEngine
              providerProfile={{
                id: user.id,
                skills: ['React', 'Node.js', 'TypeScript', 'Python'],
                location: 'Paris',
                rating: 4.7,
                completedProjects: 28,
                portfolio: [],
                hourlyRate: 65,
                categories: ['web-development', 'mobile-development']
              }}
              missions={filteredAndSortedMissions}
              onMissionRecommended={(mission: any) => {
                setLocation(`/missions/${mission.missionId}`);
                setShowAIMatching(false);
              }}
            />
          </div>
        )}

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
          {isLoading && (
            <div className="text-center py-12 sm:col-span-2 lg:col-span-3">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-500">Chargement des missions...</p>
            </div>
          )}

          {/* Mode d√©grad√© avec messages d'erreur am√©lior√©s */}
          {(error || isFallbackMode) && !isLoading && (
            <div className="text-center py-12 sm:col-span-2 lg:col-span-3">
              <div className="bg-gradient-to-br from-orange-50 to-red-50 border border-orange-200 rounded-2xl p-8 mx-auto max-w-2xl">
                <div className="text-orange-500 mb-4">
                  {isFallbackMode ? '‚ö†Ô∏è' : '‚ùå'}
                </div>

                <h3 className="text-xl font-semibold text-gray-900 mb-3">
                  {isFallbackMode ? 'Mode d√©grad√© activ√©' : 'Probl√®me de chargement'}
                </h3>

                <p className="text-gray-700 text-base mb-4">
                  {isFallbackMode 
                    ? 'Les missions ne peuvent pas √™tre charg√©es normalement. Le syst√®me fonctionne en mode d√©grad√©.'
                    : 'Impossible de charger les missions pour le moment.'
                  }
                </p>

                {metadata.error_message && (
                  <div className="bg-white/70 rounded-lg p-4 mb-4 text-sm text-gray-600">
                    <span className="font-medium">D√©tail:</span> {metadata.error_message}
                  </div>
                )}

                {process.env.NODE_ENV === 'development' && error && (
                  <details className="mt-4 text-left bg-white/50 p-4 rounded-lg text-xs">
                    <summary className="cursor-pointer font-medium text-gray-700">Informations de debug</summary>
                    <div className="mt-3 space-y-2">
                      <div><strong>Message:</strong> {error?.message}</div>
                      <div><strong>Metadata:</strong> {JSON.stringify(metadata, null, 2)}</div>
                      <div><strong>isFallbackMode:</strong> {isFallbackMode ? 'Oui' : 'Non'}</div>
                    </div>
                  </details>
                )}

                <div className="flex flex-col sm:flex-row gap-3 justify-center mt-6">
                  <button 
                    onClick={() => {
                      console.log('üîÑ Retry manuel d√©clench√©');
                      refetch();
                    }}
                    className="px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg hover:from-blue-700 hover:to-blue-800 transition-all duration-200 shadow-lg hover:shadow-xl font-medium"
                  >
                    üîÑ R√©essayer
                  </button>

                  <button 
                    onClick={() => {
                      console.log('üè† Retour accueil');
                      window.location.href = '/';
                    }}
                    className="px-6 py-3 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg hover:from-gray-600 hover:to-gray-700 transition-all duration-200 shadow-lg hover:shadow-xl font-medium"
                  >
                    üè† Retour accueil
                  </button>
                </div>

                {/* Suggestions d'action */}
                <div className="mt-6 text-sm text-gray-600">
                  <p className="mb-2">üí° <strong>Suggestions:</strong></p>
                  <ul className="text-left space-y-1 max-w-md mx-auto">
                    <li>‚Ä¢ V√©rifiez votre connexion internet</li>
                    <li>‚Ä¢ Essayez de recharger dans quelques minutes</li>
                    <li>‚Ä¢ Contactez le support si le probl√®me persiste</li>
                  </ul>
                </div>
              </div>
            </div>
          )}

          {/* Aucune mission en mode d√©grad√© - message simple */}
          {isFallbackMode && !isLoading && missions.length === 0 && (
            <div className="sm:col-span-2 lg:col-span-3">
              <div className="bg-blue-50 border border-blue-200 rounded-2xl p-6 mb-8">
                <h4 className="text-lg font-semibold text-blue-900 mb-3">üì° Service temporairement indisponible</h4>
                <p className="text-blue-800 mb-4">
                  Les missions ne peuvent pas √™tre charg√©es pour le moment. Veuillez r√©essayer dans quelques instants.
                </p>
              </div>
            </div>
          )}

          {!isLoading && !error && filteredAndSortedMissions.map((mission: MissionWithBids) => (
            <MissionCard
              key={mission.id}
              mission={mission}
              onClick={() => setLocation(`/missions/${mission.id}`)}
            />
          ))}

          {!isLoading && !error && filteredAndSortedMissions.length === 0 && (
            <div className="text-center py-12 sm:col-span-2 lg:col-span-3">
              <div className="text-gray-300 mb-4">
                <svg className="w-16 h-16 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L10 8.586 8.707 7.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
              </div>
              <p className="text-gray-500 text-lg">Aucune mission trouv√©e ({missions.length} missions totales)</p>
              <p className="text-gray-400 text-sm mt-2">Essayez de modifier vos filtres</p>
            </div>
          )}
        </div>
      </div>

    </div>
  );
}