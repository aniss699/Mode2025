import { useState, useEffect } from 'react';
import { useAuth } from '@/hooks/use-auth';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Switch } from '@/components/ui/switch';
import { Progress } from '@/components/ui/progress';
import { 
  User, 
  Briefcase, 
  Users, 
  Edit,
  Clock,
  Plus,
  X,
  Target,
  Brain,
  Sparkles,
  RefreshCw,
  Save,
  Zap,
  Lightbulb,
  TrendingUp,
  Calendar
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { AvailabilityCalendar } from '@/components/calendar/availability-calendar';
import { ProfileCompletenessAnalyzer } from '@/components/ai/profile-completeness-analyzer';
import { TextCompletionAssistant } from '@/components/ai/text-completion-assistant';
// Refactored components
import { ProfileHeader } from '@/components/profile/ProfileHeader';
import { ProfileGeneralInfo } from '@/components/profile/ProfileGeneralInfo';
import { ProfileSkills } from '@/components/profile/ProfileSkills';
import { ProfilePortfolio } from '@/components/profile/ProfilePortfolio';
import { ProfileActions } from '@/components/profile/ProfileActions';

export default function Profile() {
  const { user, login } = useAuth();
  const { toast } = useToast();
  const [activeProfile, setActiveProfile] = useState<'client' | 'provider'>(user?.type || 'client');

  const [profileData, setProfileData] = useState({
    name: user?.name || '',
    email: user?.email || '',
    phone: '',
    location: '',
    bio: '',
    skills: [] as Array<{ name: string; hourlyRate?: number; category?: string }>,
    experience: '',
    portfolio: [] as Array<{title: string; description: string}>,
    availability: true,
    hourlyRate: '',
    company: '',
    industry: '',
    calendarAvailability: [] as Array<{ 
      id?: number, 
      date: string, // Format YYYY-MM-DD
      startTime: string, // Format HH:MM
      endTime: string, // Format HH:MM
      rate?: number 
    }>,
    keywords: [] as string[]
  });

  const [newSkill, setNewSkill] = useState('');
  const [newSkillRate, setNewSkillRate] = useState(0);
  const [newSkillCategory, setNewSkillCategory] = useState('');
  const [newPortfolioItem, setNewPortfolioItem] = useState({title: '', description: ''});
  const [newAvailabilitySlot, setNewAvailabilitySlot] = useState<{ 
    date: string, 
    startTime: string, 
    endTime: string 
  } | undefined>(undefined);
  const [showAIAssistant, setShowAIAssistant] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  // Charger TOUT le profil depuis la BDD au mount
  useEffect(() => {
    const loadFullProfile = async () => {
      if (!user?.id) return;

      try {
        // 1. Charger le profil complet
        const profileResponse = await fetch(`/api/profile/${user.id}`);

        if (profileResponse.ok) {
          const profileData = await profileResponse.json();

          console.log('✅ Profil chargé:', profileData);

          // Mettre à jour tous les champs
          setProfileData(prev => ({
            ...prev,
            name: profileData.displayName || user.name || '',
            email: profileData.email || user.email || '',
            phone: profileData.phone || '',
            location: profileData.location || '',
            bio: profileData.bio || '',
            skills: profileData.skills || [],
            experience: profileData.experience || '',
            portfolio: profileData.portfolio || [],
            // ✅ Initialiser à true par défaut pour les PRO si non défini
            availability: profileData.availability !== undefined 
              ? Boolean(profileData.availability)
              : (user?.role === 'PRO' ? true : false),
            hourlyRate: profileData.hourlyRate?.toString() || '',
            company: profileData.company || '',
            industry: profileData.industry || '',
            keywords: profileData.keywords || [],
            calendarAvailability: profileData.calendarAvailability || []
          }));

          // Mettre à jour le type de profil actif
          if (profileData.role === 'PRO') {
            setActiveProfile('provider');
          } else {
            setActiveProfile('client');
          }
        } else {
          console.warn('⚠️ Profil non trouvé, utilisation des données utilisateur');
          // Initialiser avec les données de base de l'utilisateur
          setProfileData(prev => ({
            ...prev,
            name: user.name || '',
            email: user.email || '',
            // ✅ PRO disponible par défaut, CLIENT non
            availability: user.role === 'PRO' ? true : false
          }));
        }

        // 2. Charger les créneaux de disponibilité (non bloquant)
        try {
          const availabilityResponse = await fetch(`/api/availability/${user.id}`);
          if (availabilityResponse.ok) {
            const data = await availabilityResponse.json();
            console.log('📅 Données disponibilité API:', data);
            
            if (data.success && data.availability) {
              const slots = data.availability.flatMap((day: any) => {
                // ✅ Gérer le cas où slots est un array d'objets
                if (day.slots && Array.isArray(day.slots)) {
                  return day.slots.map((slot: any) => ({
                    id: slot.id || day.id, // ✅ Utiliser l'ID du slot en priorité
                    date: typeof day.date === 'string' ? day.date.split('T')[0] : day.date,
                    startTime: slot.start,
                    endTime: slot.end,
                    rate: slot.rate
                  }));
                }
                return [];
              });

              console.log('✅ Slots chargés:', slots);

              setProfileData(prev => ({
                ...prev,
                calendarAvailability: slots
              }));
            }
          }
        } catch (availError) {
          console.warn('⚠️ Impossible de charger les disponibilités:', availError);
          // Non bloquant
        }
      } catch (error) {
        console.error('❌ Erreur chargement profil:', error);

        // Fallback: utiliser les données utilisateur de base
        setProfileData(prev => ({
          ...prev,
          name: user.name || '',
          email: user.email || '',
          availability: true
        }));

        toast({
          title: 'Profil partiellement chargé',
          description: 'Certaines données de profil sont manquantes. Vous pouvez les compléter maintenant.',
          variant: 'default'
        });
      }
    };

    loadFullProfile();
  }, [user?.id]);

  const handleAISuggestionApply = (field: string, value: string) => {
    setProfileData(prev => ({
      ...prev,
      [field]: value
    }));
    toast({
      title: 'Suggestion appliquée',
      description: `Le champ "${field}" a été mis à jour avec la suggestion IA.`,
    });
  };

  const handleTextCompletion = (field: string) => (text: string) => {
    setProfileData(prev => ({
      ...prev,
      [field]: text
    }));
  };

  const handleSave = async () => {
    setIsSaving(true);
    try {
      // Sauvegarder le profil dans la base de données via l'API
      console.log('💾 Sauvegarde du profil:', {
        userId: user.id,
        activeProfile,
        availability: profileData.availability,
        fields: Object.keys(profileData)
      });

      const response = await fetch(`/api/profile/${user.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          // Champs utilisateur de base
          displayName: profileData.name,
          email: profileData.email,

          // Champs profile_data JSON
          phone: profileData.phone,
          location: profileData.location,
          bio: profileData.bio,
          company: profileData.company,
          industry: profileData.industry,
          experience: profileData.experience,

          // Données prestataire
          skills: profileData.skills,
          portfolio: profileData.portfolio,
          hourlyRate: profileData.hourlyRate,
          availability: profileData.availability, // ✅ BOOLEAN pas STRING
          keywords: profileData.keywords,
          calendarAvailability: profileData.calendarAvailability,

          // Rôle
          role: activeProfile === 'provider' ? 'PRO' : 'CLIENT'
        })
      });

      // Vérifier le statut HTTP
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || `Erreur HTTP ${response.status}`);
      }

      const result = await response.json();

      // Vérifier le résultat
      if (!result.success) {
        throw new Error(result.error || 'Sauvegarde échouée');
      }

      // ✅ RECHARGER le profil depuis la BDD pour garantir la cohérence
      console.log('🔄 Rechargement du profil depuis la BDD...');
      const reloadResponse = await fetch(`/api/profile/${user.id}`);
      
      if (reloadResponse.ok) {
        const reloadedProfile = await reloadResponse.json();
        
        // Mettre à jour l'état local avec les données de la BDD
        setProfileData(prev => ({
          ...prev,
          name: reloadedProfile.displayName || user.name || '',
          email: reloadedProfile.email || user.email || '',
          phone: reloadedProfile.phone || '',
          location: reloadedProfile.location || '',
          bio: reloadedProfile.bio || '',
          skills: reloadedProfile.skills || [],
          experience: reloadedProfile.experience || '',
          portfolio: reloadedProfile.portfolio || [],
          availability: Boolean(reloadedProfile.availability),
          hourlyRate: reloadedProfile.hourlyRate?.toString() || '',
          company: reloadedProfile.company || '',
          industry: reloadedProfile.industry || '',
          keywords: reloadedProfile.keywords || [],
          calendarAvailability: reloadedProfile.calendarAvailability || []
        }));

        console.log('✅ Profil rechargé depuis la BDD');
      }

      toast({
        title: '✅ Profil sauvegardé',
        description: 'Vos informations ont été mises à jour avec succès.',
      });
    } catch (error: any) {
      console.error('❌ Erreur sauvegarde:', error);

      toast({
        title: '❌ Erreur de sauvegarde',
        description: error.message || 'Impossible de sauvegarder le profil.',
        variant: 'destructive',
      });
    } finally {
      setIsSaving(false);
    }
  };

  const handleProfileTypeChange = async (newType: 'client' | 'provider') => {
    if (!user?.id) return;

    setActiveProfile(newType);

    try {
      // Déterminer le nouveau rôle basé sur le type
      const newRole = newType === 'provider' ? 'PRO' : 'CLIENT';

      // Mettre à jour le rôle en base de données
      const response = await fetch(`/api/users/${user.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: user.name,
          role: newRole,
          profile_data: {
            ...((user as any).profile_data || {}),
          }
        })
      });

      if (!response.ok) {
        throw new Error('Erreur lors de la mise à jour du rôle');
      }

      // Mettre à jour le contexte utilisateur local
      const updatedUser = { ...user, type: newType, role: newRole };
      login(updatedUser);

      toast({
        title: 'Mode changé',
        description: `Vous êtes maintenant en mode ${newType === 'client' ? 'Client' : 'Prestataire'}`,
      });
    } catch (error) {
      console.error('Erreur changement de mode:', error);
      toast({
        title: 'Erreur',
        description: 'Impossible de changer le mode. Veuillez réessayer.',
        variant: 'destructive'
      });
    }
  };

  const addSkill = () => {
    if (newSkill.trim() && !profileData.skills.some(s => s.name === newSkill.trim())) {
      setProfileData(prev => ({
        ...prev,
        skills: [...prev.skills, {
          name: newSkill.trim(),
          hourlyRate: newSkillRate || undefined,
          category: newSkillCategory || undefined
        }]
      }));
      setNewSkill('');
      setNewSkillRate(0);
      setNewSkillCategory('');
    }
  };

  const removeSkill = (skillName: string) => {
    setProfileData(prev => ({
      ...prev,
      skills: prev.skills.filter(s => s.name !== skillName)
    }));
  };

  const updateSkillRate = (skillName: string, rate: number) => {
    setProfileData(prev => ({
      ...prev,
      skills: prev.skills.map(s => 
        s.name === skillName ? { ...s, hourlyRate: rate } : s
      )
    }));
  };

  const addPortfolioItem = () => {
    if (newPortfolioItem.title.trim() && newPortfolioItem.description.trim()) {
      setProfileData(prev => ({
        ...prev,
        portfolio: [...prev.portfolio, newPortfolioItem]
      }));
      setNewPortfolioItem({title: '', description: ''});
    }
  };

  const addCalendarAvailability = async () => {
    if (!user?.id) {
      toast({
        title: 'Erreur',
        description: 'Vous devez être connecté.',
        variant: 'destructive'
      });
      return;
    }

    if (newAvailabilitySlot && newAvailabilitySlot.date && newAvailabilitySlot.startTime && newAvailabilitySlot.endTime) {
      try {
        const newSlot = {
          date: newAvailabilitySlot.date,
          startTime: newAvailabilitySlot.startTime,
          endTime: newAvailabilitySlot.endTime,
          rate: parseFloat(profileData.hourlyRate) || 50
        };

        // Ajouter au state local
        setProfileData(prev => ({
          ...prev,
          calendarAvailability: [...prev.calendarAvailability, newSlot]
        }));

        // Sauvegarder dans la base de données
        const response = await fetch('/api/availability', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'x-user-id': user.id.toString()
          },
          body: JSON.stringify({
            availability: [{
              date: newSlot.date,
              slots: [{
                start: newSlot.startTime,
                end: newSlot.endTime,
                rate: newSlot.rate
              }]
            }]
          })
        });

        if (!response.ok) {
          throw new Error('Erreur lors de la sauvegarde');
        }

        toast({
          title: 'Disponibilité ajoutée',
          description: 'Votre créneau a été enregistré avec succès.',
        });

        setNewAvailabilitySlot(undefined);
      } catch (error) {
        console.error('Erreur sauvegarde disponibilité:', error);
        toast({
          title: 'Erreur',
          description: 'Impossible de sauvegarder la disponibilité.',
          variant: 'destructive'
        });
      }
    }
  };

  const removeCalendarAvailability = async (indexToRemove: number) => {
    if (!user?.id) return;

    const slotToRemove = profileData.calendarAvailability[indexToRemove];

    try {
      // Supprimer de la base de données si un ID existe
      if (slotToRemove?.id) {
        const response = await fetch(`/api/availability/${slotToRemove.id}`, {
          method: 'DELETE',
          headers: { 
            'x-user-id': user.id.toString()
          }
        });

        if (!response.ok) {
          throw new Error('Erreur lors de la suppression');
        }
      }

      // Mettre à jour le state local
      setProfileData(prev => ({
        ...prev,
        calendarAvailability: prev.calendarAvailability.filter((_, index) => index !== indexToRemove)
      }));

      toast({
        title: 'Créneau supprimé',
        description: 'Le créneau a été supprimé avec succès.',
      });
    } catch (error) {
      console.error('Erreur suppression créneau:', error);
      toast({
        title: 'Erreur',
        description: 'Impossible de supprimer le créneau.',
        variant: 'destructive'
      });
    }
  };

  // Fonctions d'assistance IA
  const handleAITextImprovement = async (field: string) => {
    const currentValue = profileData[field as keyof typeof profileData];
    if (!currentValue) return;

    try {
      // Simulation d'amélioration IA
      const improvedText = currentValue + " [Version améliorée par IA - style optimisé]";
      handleInputChange(field, improvedText);

      toast({
        title: "Texte amélioré !",
        description: "Votre texte a été optimisé par l'IA.",
      });
    } catch (error) {
      toast({
        title: "Erreur",
        description: "Impossible d'améliorer le texte pour le moment.",
        variant: "destructive",
      });
    }
  };

  const handleAIEnrichment = async (field: string) => {
    const currentValue = profileData[field as keyof typeof profileData];
    if (!currentValue) return;

    try {
      const keywords = activeProfile === 'provider' ? 
        ['professionnel', 'expérimenté', 'qualité', 'délais'] :
        ['partenariat', 'collaboration', 'projet', 'qualité'];

      const enrichedText = currentValue + ` Mots-clés: ${keywords.slice(0, 2).join(', ')}.`;
      handleInputChange(field, enrichedText);

      toast({
        title: "Texte enrichi !",
        description: "Des mots-clés pertinents ont été ajoutés.",
      });
    } catch (error) {
      toast({
        title: "Erreur",
        description: "Impossible d'enrichir le texte pour le moment.",
        variant: "destructive",
      });
    }
  };

  const handleAICallToAction = async (field: string) => {
    const currentValue = profileData[field as keyof typeof profileData];
    if (!currentValue) return;

    try {
      const cta = activeProfile === 'provider' ? 
        " Contactez-moi pour discuter de votre projet !" :
        " N'hésitez pas à nous contacter pour échanger !";

      const textWithCTA = currentValue + cta;
      handleInputChange(field, textWithCTA);

      toast({
        title: "Appel à l'action ajouté !",
        description: "Un appel à l'action engageant a été ajouté.",
      });
    } catch (error) {
      toast({
        title: "Erreur",
        description: "Impossible d'ajouter l'appel à l'action.",
        variant: "destructive",
      });
    }
  };

  const handleAIStructure = async (field: string) => {
    const currentValue = profileData[field as keyof typeof profileData];
    if (!currentValue) return;

    try {
      const sentences = currentValue.split('. ');
      const structuredText = sentences.map((sentence: string, index: number) => 
        index === 0 ? `✓ ${sentence}` : 
        index < sentences.length - 1 ? `• ${sentence}` : sentence
      ).join('. ');

      handleInputChange(field, structuredText);

      toast({
        title: "Texte structuré !",
        description: "La structure de votre texte a été améliorée.",
      });
    } catch (error) {
      toast({
        title: "Erreur",
        description: "Impossible de structurer le texte.",
        variant: "destructive",
      });
    }
  };

  const handleAIKeywordSuggestion = async () => {
    try {
      const suggestions = activeProfile === 'provider' ? 
        ['développement web', 'react', 'nodejs', 'consultation', 'formation'] :
        ['projet digital', 'marketing', 'e-commerce', 'startup', 'innovation'];

      // Ajouter les suggestions aux mots-clés existants
      const newKeywords = [...(profileData.keywords || []), ...suggestions.slice(0, 3)];
      const uniqueKeywords = Array.from(new Set(newKeywords));

      handleInputChange('keywords', uniqueKeywords);

      toast({
        title: "Mots-clés suggérés !",
        description: `${suggestions.slice(0, 3).length} nouveaux mots-clés ajoutés par l'IA.`,
      });
    } catch (error) {
      toast({
        title: "Erreur",
        description: "Impossible de générer des suggestions pour le moment.",
        variant: "destructive",
      });
    }
  };

  const handleInputChange = (field: string, value: any) => {
    setProfileData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <Card className="max-w-md w-full mx-4">
          <CardContent className="p-8 text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Connexion requise</h2>
            <p className="text-gray-600">Connectez-vous pour accéder à votre profil</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="max-w-6xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <h1 className="text-3xl font-bold text-gray-900">Mon Profil</h1>
          </div>

          {/* Mode Selector - Plus visible */}
          <div className="mt-6">
            <div className="bg-white rounded-xl p-4 shadow-lg border">
              <h3 className="text-lg font-semibold text-gray-900 mb-3">Changer de mode</h3>
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => handleProfileTypeChange('client')}
                  className={`flex items-center px-6 py-3 rounded-lg font-medium transition-all ${
                    activeProfile === 'client'
                      ? 'bg-blue-600 text-white shadow-md'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  <Briefcase className="w-5 h-5 mr-2" />
                  Mode Client
                </button>
                <button
                  onClick={() => handleProfileTypeChange('provider')}
                  className={`flex items-center px-6 py-3 rounded-lg font-medium transition-all ${
                    activeProfile === 'provider'
                      ? 'bg-green-600 text-white shadow-md'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  <Users className="w-5 h-5 mr-2" />
                  Mode Prestataire
                </button>
              </div>
              <p className="text-sm text-gray-500 mt-2">
                {activeProfile === 'client' 
                  ? 'Publiez des missions et trouvez des prestataires'
                  : 'Recherchez des missions et proposez vos services'
                }
              </p>
            </div>
          </div>
        </div>

        <ProfileHeader 
          profileData={profileData}
          activeProfile={activeProfile}
        />

        {/* Profile Content */}
        <Tabs defaultValue="general" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3 md:grid-cols-5 gap-1 md:gap-0 h-auto md:h-10 p-1">
            <TabsTrigger value="general" className="flex flex-col md:flex-row items-center justify-center px-1 md:px-3 py-2 md:py-1.5 text-xs md:text-sm min-w-0">
              <User className="w-3 h-3 md:w-4 md:h-4 md:mr-2 mb-1 md:mb-0 flex-shrink-0" />
              <span className="text-center leading-tight">Infos</span>
            </TabsTrigger>
            <TabsTrigger value="ai-analysis" className="flex flex-col md:flex-row items-center justify-center px-1 md:px-3 py-2 md:py-1.5 text-xs md:text-sm min-w-0">
              <Brain className="w-3 h-3 md:w-4 md:h-4 md:mr-2 mb-1 md:mb-0 flex-shrink-0" />
              <span className="text-center leading-tight">IA</span>
            </TabsTrigger>
            <TabsTrigger value="skills" className="flex flex-col md:flex-row items-center justify-center px-1 md:px-3 py-2 md:py-1.5 text-xs md:text-sm min-w-0">
              <Briefcase className="w-3 h-3 md:w-4 md:h-4 md:mr-2 mb-1 md:mb-0 flex-shrink-0" />
              <span className="text-center leading-tight">Skills</span>
            </TabsTrigger>
            <TabsTrigger value="portfolio" className="flex flex-col md:flex-row items-center justify-center px-1 md:px-3 py-2 md:py-1.5 text-xs md:text-sm min-w-0">
              <Briefcase className="w-3 h-3 md:w-4 md:h-4 md:mr-2 mb-1 md:mb-0 flex-shrink-0" />
              <span className="text-center leading-tight">Portfolio</span>
            </TabsTrigger>
            <TabsTrigger value="availability" className="flex flex-col md:flex-row items-center justify-center px-1 md:px-3 py-2 md:py-1.5 text-xs md:text-sm min-w-0">
              <Clock className="w-3 h-3 md:w-4 md:h-4 md:mr-2 mb-1 md:mb-0 flex-shrink-0" />
              <span className="text-center leading-tight">Agenda</span>
            </TabsTrigger>
          </TabsList>

          <TabsContent value="ai-analysis">
            <ProfileCompletenessAnalyzer
              userProfile={profileData}
              userType={activeProfile}
              onApplySuggestion={handleAISuggestionApply}
            />
          </TabsContent>

          <TabsContent value="general" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>Informations générales</span>
                  <Badge variant="outline" className="bg-blue-50 text-blue-600 border-blue-200">
                    <Brain className="w-4 h-4 mr-1" />
                    Assistant IA activé
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="name">Nom complet</Label>
                  <Input
                    id="name"
                    value={profileData.name}
                    onChange={(e) => setProfileData(prev => ({...prev, name: e.target.value}))}
                  />
                </div>
                <div>
                  <Label htmlFor="email">Email</Label>
                  <Input
                    id="email"
                    type="email"
                    value={profileData.email}
                    onChange={(e) => setProfileData(prev => ({...prev, email: e.target.value}))}
                  />
                </div>
                <div>
                  <Label htmlFor="phone">Téléphone</Label>
                  <Input
                    id="phone"
                    value={profileData.phone}
                    onChange={(e) => setProfileData(prev => ({...prev, phone: e.target.value}))}
                    placeholder="+33 6 12 34 56 78"
                  />
                </div>
                <div>
                  <Label htmlFor="location">Localisation</Label>
                  <Input
                    id="location"
                    value={profileData.location}
                    onChange={(e) => setProfileData(prev => ({...prev, location: e.target.value}))}
                    placeholder="Paris, France"
                  />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>
                  {activeProfile === 'client' ? 'À propos de votre entreprise' : 'À propos de vous'}
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <Label htmlFor="bio">Description</Label>
                  <div className="relative">
                    <Textarea
                      id="bio"
                      value={profileData.bio || ''}
                      onChange={(e) => handleInputChange('bio', e.target.value)}
                      placeholder={activeProfile === 'client' 
                        ? "Décrivez votre entreprise et vos besoins..."
                        : "Présentez-vous et vos services..."
                      }
                      rows={4}
                    />
                    <TextCompletionAssistant
                      inputValue={profileData.bio}
                      onSuggestionApply={handleTextCompletion('bio')}
                      context={{
                        field: 'bio',
                        category: 'profile',
                        userType: activeProfile
                      }}
                    />
                  </div>

                  {/* Boutons d'assistance IA visibles */}
                  <Card className="bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200">
                    <CardHeader className="pb-3">
                      <CardTitle className="flex items-center gap-2 text-sm">
                        <Brain className="h-4 w-4 text-blue-600" />
                        Assistant IA - Améliorer votre description
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <div className="grid grid-cols-2 gap-2">
                        <Button
                          onClick={() => handleAITextImprovement('bio')}
                          variant="outline"
                          size="sm"
                          className="border-blue-200 hover:bg-blue-50 text-blue-700"
                        >
                          <Sparkles className="h-3 w-3 mr-2" />
                          Améliorer le style
                        </Button>
                        <Button
                          onClick={() => handleAIEnrichment('bio')}
                          variant="outline"
                          size="sm"
                          className="border-green-200 hover:bg-green-50 text-green-700"
                        >
                          <Target className="h-3 w-3 mr-2" />
                          Enrichir avec mots-clés
                        </Button>
                        <Button
                          onClick={() => handleAICallToAction('bio')}
                          variant="outline"
                          size="sm"
                          className="border-orange-200 hover:bg-orange-50 text-orange-700"
                        >
                          <Zap className="h-3 w-3 mr-2" />
                          Ajouter un appel à l'action
                        </Button>
                        <Button
                          onClick={() => handleAIStructure('bio')}
                          variant="outline"
                          size="sm"
                          className="border-purple-200 hover:bg-purple-50 text-purple-700"
                        >
                          <RefreshCw className="h-3 w-3 mr-2" />
                          Structurer le texte
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {activeProfile === 'client' ? (
                  <>
                    <div>
                      <Label htmlFor="company">Entreprise</Label>
                      <Input
                        id="company"
                        value={profileData.company}
                        onChange={(e) => setProfileData(prev => ({...prev, company: e.target.value}))}
                        placeholder="Nom de votre entreprise"
                      />
                    </div>
                    <div>
                      <Label htmlFor="industry">Secteur d'activité</Label>
                      <Input
                        id="industry"
                        value={profileData.industry}
                        onChange={(e) => setProfileData(prev => ({...prev, industry: e.target.value}))}
                        placeholder="Ex: Tech, Marketing, Finance..."
                      />
                    </div>
                  </>
                ) : (
                  <>
                    <div className="space-y-3">
                      <Label htmlFor="experience">Expérience</Label>
                      <Textarea
                        id="experience"
                        value={profileData.experience}
                        onChange={(e) => setProfileData(prev => ({...prev, experience: e.target.value}))}
                        placeholder="Décrivez votre expérience professionnelle..."
                        rows={3}
                      />

                      {/* Assistant IA pour l'expérience */}
                      <Card className="bg-gradient-to-r from-green-50 to-blue-50 border-green-200">
                        <CardContent className="p-4">
                          <div className="flex items-center gap-2 mb-3">
                            <Brain className="h-4 w-4 text-green-600" />
                            <span className="text-sm font-medium text-green-800">IA - Optimiser votre expérience</span>
                          </div>
                          <div className="grid grid-cols-2 gap-2">
                            <Button
                              onClick={() => handleAITextImprovement('experience')}
                              variant="outline"
                              size="sm"
                              className="border-green-200 hover:bg-green-50 text-green-700"
                            >
                              <Sparkles className="h-3 w-3 mr-2" />
                              Perfectionner
                            </Button>
                            <Button
                              onClick={() => handleAIEnrichment('experience')}
                              variant="outline"
                              size="sm"
                              className="border-blue-200 hover:bg-blue-50 text-blue-700"
                            >
                              <Target className="h-3 w-3 mr-2" />
                              Ajouter expertise
                            </Button>
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                    <div>
                      <Label htmlFor="hourlyRate">Tarif horaire (€)</Label>
                      <Input
                        id="hourlyRate"
                        type="number"
                        value={profileData.hourlyRate}
                        onChange={(e) => setProfileData(prev => ({...prev, hourlyRate: e.target.value}))}
                        placeholder="50"
                      />
                    </div>
                  </>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {activeProfile === 'provider' && (
            <>
              <TabsContent value="skills" className="space-y-6">
                <ProfileSkills
                  skills={profileData.skills}
                  newSkill={newSkill}
                  newSkillRate={newSkillRate}
                  newSkillCategory={newSkillCategory}
                  onNewSkillChange={setNewSkill}
                  onNewSkillRateChange={setNewSkillRate}
                  onNewSkillCategoryChange={setNewSkillCategory}
                  onAddSkill={addSkill}
                  onRemoveSkill={removeSkill}
                  onUpdateSkillRate={updateSkillRate}
                  onAIKeywordSuggestion={handleAIKeywordSuggestion}
                />
              </TabsContent>

              <TabsContent value="portfolio">
                <Card>
                  <CardHeader>
                    <CardTitle>Portfolio</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      <div className="grid md:grid-cols-2 gap-4">
                        {profileData.portfolio.map((item, index) => (
                          <Card key={index} className="border">
                            <CardContent className="p-4">
                              <h4 className="font-semibold mb-2">{item.title}</h4>
                              <p className="text-gray-600 text-sm">{item.description}</p>
                            </CardContent>
                          </Card>
                        ))}
                      </div>

                      <div className="border rounded-lg p-4 bg-gray-50">
                        <h4 className="font-medium mb-3">Ajouter un projet</h4>
                        <div className="space-y-3">
                          <Input
                            value={newPortfolioItem.title}
                            onChange={(e) => setNewPortfolioItem(prev => ({...prev, title: e.target.value}))}
                            placeholder="Titre du projet"
                          />
                          <Textarea
                            value={newPortfolioItem.description}
                            onChange={(e) => setNewPortfolioItem(prev => ({...prev, description: e.target.value}))}
                            placeholder="Description du projet"
                            rows={3}
                          />
                          <Button onClick={addPortfolioItem}>
                            <Plus className="w-4 h-4 mr-2" />
                            Ajouter
                          </Button>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Availability Tab */}
              <TabsContent value="availability" className="space-y-6">
                {/* Vue d'ensemble des disponibilités */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <Card className="bg-gradient-to-br from-green-50 to-green-100 border-green-200">
                    <CardContent className="p-4 text-center">
                      <div className="text-2xl font-bold text-green-700 mb-1">
                        {profileData.calendarAvailability.length}
                      </div>
                      <div className="text-sm text-green-600">Créneaux libres</div>
                      <div className="text-xs text-green-500 mt-1">cette semaine</div>
                    </CardContent>
                  </Card>

                  <Card className="bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200">
                    <CardContent className="p-4 text-center">
                      <div className="text-2xl font-bold text-blue-700 mb-1">32h</div>
                      <div className="text-sm text-blue-600">Disponibles</div>
                      <div className="text-xs text-blue-500 mt-1">ce mois-ci</div>
                    </CardContent>
                  </Card>

                  <Card className="bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200">
                    <CardContent className="p-4 text-center">
                      <div className="text-2xl font-bold text-purple-700 mb-1">
                        {profileData.availability ? 'ON' : 'OFF'}
                      </div>
                      <div className="text-sm text-purple-600">Statut</div>
                      <div className="text-xs text-purple-500 mt-1">
                        {profileData.availability ? 'Disponible' : 'Indisponible'}
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Statut de disponibilité global - VERSION AMÉLIORÉE */}
                <Card className="border-2 border-blue-300 shadow-lg">
                  <CardHeader className="bg-gradient-to-r from-blue-50 to-purple-50">
                    <CardTitle className="flex items-center justify-between">
                      <div className="flex items-center">
                        <Clock className="w-5 h-5 mr-2 text-blue-600" />
                        <div>
                          <span className="text-lg font-bold">Statut de disponibilité</span>
                          <p className="text-xs text-gray-600 font-normal mt-1">
                            Active ce switch pour apparaître dans les recherches de clients
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-3">
                        {profileData.availability && (
                          <Badge className="bg-green-500 text-white animate-pulse">
                            VISIBLE
                          </Badge>
                        )}
                        <Switch
                          checked={profileData.availability}
                          onCheckedChange={(checked) => {
                            setProfileData(prev => ({...prev, availability: checked}));
                          }}
                          className="scale-125"
                        />
                      </div>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className={`p-4 rounded-lg border-2 ${
                        profileData.availability 
                          ? 'bg-gradient-to-r from-green-50 to-emerald-50 border-green-300 shadow-md' 
                          : 'bg-gradient-to-r from-red-50 to-orange-50 border-red-300 shadow-md'
                      }`}>
                        <div className="flex items-center justify-between">
                          <div>
                            <h4 className="font-bold text-lg mb-2">
                              {profileData.availability ? '✅ DISPONIBLE pour nouveaux projets' : '⏸️ INDISPONIBLE'}
                            </h4>
                            <p className="text-sm font-medium mb-2">
                              {profileData.availability 
                                ? '🎯 Votre profil est visible dans la page "Prestataires disponibles"'
                                : '❌ Votre profil est masqué des recherches clients'
                              }
                            </p>
                            <div className={`text-xs p-2 rounded mt-2 ${
                              profileData.availability 
                                ? 'bg-green-100 text-green-800 border border-green-300' 
                                : 'bg-orange-100 text-orange-800 border border-orange-300'
                            }`}>
                              {profileData.availability 
                                ? '💡 Les clients peuvent vous trouver et vous contacter'
                                : '⚠️ Pour recevoir des demandes, activez votre disponibilité ci-dessus'
                              }
                            </div>
                          </div>
                          {profileData.availability && (
                            <div className="flex flex-col items-center gap-2">
                              <Badge className="bg-green-500 text-white text-sm px-3 py-1">
                                <div className="w-2 h-2 bg-white rounded-full mr-2 animate-pulse"></div>
                                ACTIF
                              </Badge>
                              <span className="text-xs text-green-700 font-medium">Visible clients</span>
                            </div>
                          )}
                        </div>
                      </div>

                      {/* Planning intelligent */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-3">
                          <h4 className="font-medium flex items-center">
                            <Target className="h-4 w-4 mr-2 text-blue-500" />
                            Planning intelligent
                          </h4>
                          <div className="space-y-2">
                            <Button
                              variant="outline"
                              size="sm"
                              className="w-full justify-start"
                              onClick={() => {
                                // Simulation de créneaux optimaux
                                const tomorrow = new Date();
                                tomorrow.setDate(tomorrow.getDate() + 1);
                                tomorrow.setHours(9, 0, 0, 0);
                                const endTime = new Date(tomorrow);
                                endTime.setHours(17, 0, 0, 0);

                                setNewAvailabilitySlot({ start: tomorrow, end: endTime });
                                addCalendarAvailability();
                              }}
                            >
                              <Calendar className="h-4 w-4 mr-2" />
                              Ajouter demain (9h-17h)
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              className="w-full justify-start"
                            >
                              <Clock className="h-4 w-4 mr-2" />
                              Créneaux récurrents
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              className="w-full justify-start"
                            >
                              <Brain className="h-4 w-4 mr-2" />
                              IA: Optimiser planning
                            </Button>
                          </div>
                        </div>

                        <div className="space-y-3">
                          <h4 className="font-medium flex items-center">
                            <TrendingUp className="h-4 w-4 mr-2 text-green-500" />
                            Recommandations
                          </h4>
                          <div className="text-sm space-y-2">
                            <div className="flex items-center text-green-700 bg-green-50 p-2 rounded">
                              <Lightbulb className="h-3 w-3 mr-2" />
                              Les matinées sont 40% plus demandées
                            </div>
                            <div className="flex items-center text-blue-700 bg-blue-50 p-2 rounded">
                              <TrendingUp className="h-3 w-3 mr-2" />
                              Mardi-Jeudi: peak de demandes
                            </div>
                            <div className="flex items-center text-purple-700 bg-purple-50 p-2 rounded">
                              <Target className="h-3 w-3 mr-2" />
                              +25% de tarif en urgence possible
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Gestion des créneaux */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center justify-between">
                      <span>Gestion des créneaux</span>
                      <Button
                        size="sm"
                        className="bg-blue-600 hover:bg-blue-700"
                        onClick={() => {
                          // Quick add: demain 9h-17h
                          const tomorrow = new Date();
                          tomorrow.setDate(tomorrow.getDate() + 1);
                          tomorrow.setHours(9, 0, 0, 0);
                          const endTime = new Date(tomorrow);
                          endTime.setHours(17, 0, 0, 0);
                          setNewAvailabilitySlot({ start: tomorrow, end: endTime });
                        }}
                      >
                        <Plus className="h-4 w-4 mr-2" />
                        Ajout rapide
                      </Button>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      {/* Formulaire d'ajout amélioré */}
                      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4">
                        <h4 className="font-medium mb-4 text-blue-800">Nouveau créneau de disponibilité</h4>
                          <div className="grid grid-cols-1 gap-4">
                            <div>
                              <Label htmlFor="availabilityDate" className="text-sm font-medium text-gray-700">
                                Date
                              </Label>
                              <Input
                                id="availabilityDate"
                                type="date"
                                value={newAvailabilitySlot?.date || ''}
                                onChange={(e) => {
                                  setNewAvailabilitySlot(prev => ({ 
                                    ...(prev || { date: '', startTime: '09:00', endTime: '17:00' }), 
                                    date: e.target.value 
                                  }));
                                }}
                                className="mt-1"
                              />
                            </div>
                            <div className="grid grid-cols-2 gap-3">
                              <div>
                                <Label htmlFor="availabilityStart" className="text-sm font-medium text-gray-700">
                                  Heure de début
                                </Label>
                                <Input
                                  id="availabilityStart"
                                  type="time"
                                  value={newAvailabilitySlot?.startTime || '09:00'}
                                  onChange={(e) => {
                                    setNewAvailabilitySlot(prev => ({ 
                                      ...(prev || { date: '', startTime: '09:00', endTime: '17:00' }), 
                                      startTime: e.target.value 
                                    }));
                                  }}
                                  className="mt-1"
                                />
                              </div>
                              <div>
                                <Label htmlFor="availabilityEnd" className="text-sm font-medium text-gray-700">
                                  Heure de fin
                                </Label>
                                <Input
                                  id="availabilityEnd"
                                  type="time"
                                  value={newAvailabilitySlot?.endTime || '17:00'}
                                  onChange={(e) => {
                                    setNewAvailabilitySlot(prev => ({ 
                                      ...(prev || { date: '', startTime: '09:00', endTime: '17:00' }), 
                                      endTime: e.target.value 
                                    }));
                                  }}
                                  className="mt-1"
                                />
                              </div>
                            </div>
                          </div>

                          <div className="flex justify-between items-center mt-4">
                            <div className="flex space-x-2">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => {
                                  const today = new Date().toISOString().split('T')[0];
                                  setNewAvailabilitySlot({ 
                                    date: today, 
                                    startTime: '09:00', 
                                    endTime: '17:00' 
                                  });
                                }}
                              >
                                Aujourd'hui 9h-17h
                              </Button>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => {
                                  const tomorrow = new Date();
                                  tomorrow.setDate(tomorrow.getDate() + 1);
                                  setNewAvailabilitySlot({ 
                                    date: tomorrow.toISOString().split('T')[0], 
                                    startTime: '09:00', 
                                    endTime: '17:00' 
                                  });
                                }}
                              >
                                Demain 9h-17h
                              </Button>
                            </div>

                            <Button 
                              onClick={addCalendarAvailability} 
                              disabled={!newAvailabilitySlot || !newAvailabilitySlot.date || !newAvailabilitySlot.startTime || !newAvailabilitySlot.endTime || newAvailabilitySlot.startTime >= newAvailabilitySlot.endTime}
                              className="bg-blue-600 hover:bg-blue-700"
                            >
                              <Plus className="w-4 h-4 mr-2" />
                              Ajouter créneau
                            </Button>
                          </div>
                        </div>

                      {/* Liste des créneaux */}
                      {profileData.calendarAvailability.length > 0 ? (
                        <div>
                          <h4 className="font-medium mb-3 flex items-center">
                            <Clock className="h-4 w-4 mr-2 text-green-500" />
                            Mes créneaux de disponibilité ({profileData.calendarAvailability.length})
                          </h4>
                          <div className="space-y-3">
                            {profileData.calendarAvailability.map((slot, index) => {
                              const slotDate = new Date(slot.date);
                              const [startHour, startMin] = slot.startTime.split(':');
                              const [endHour, endMin] = slot.endTime.split(':');
                              const duration = (parseInt(endHour) * 60 + parseInt(endMin)) - (parseInt(startHour) * 60 + parseInt(startMin));
                              const durationHours = Math.round(duration / 60 * 10) / 10;
                              
                              const isToday = slot.date === new Date().toISOString().split('T')[0];
                              const isPast = slotDate < new Date(new Date().setHours(0, 0, 0, 0));

                              return (
                                <div 
                                  key={index} 
                                  className={`p-4 rounded-lg border transition-all group ${
                                    isPast 
                                      ? 'bg-gray-50 border-gray-200 opacity-50' 
                                      : isToday 
                                        ? 'bg-green-50 border-green-300 shadow-md' 
                                        : 'bg-white border-gray-200 hover:border-blue-300 hover:shadow-md'
                                  }`}
                                >
                                  <div className="flex items-center justify-between">
                                    <div className="flex-1">
                                      <div className="flex items-center space-x-3">
                                        <div className={`w-3 h-3 rounded-full ${
                                          isPast ? 'bg-gray-400' : isToday ? 'bg-green-500' : 'bg-blue-500'
                                        }`}></div>
                                        <div>
                                          <div className="font-semibold text-gray-800">
                                            {slotDate.toLocaleDateString('fr-FR', { 
                                              weekday: 'long', 
                                              day: 'numeric', 
                                              month: 'long' 
                                            })}
                                          </div>
                                          <div className="text-sm text-gray-600">
                                            {slot.startTime} - {slot.endTime}
                                          </div>
                                        </div>
                                      </div>
                                    </div>

                                    <div className="flex items-center space-x-3">
                                      <div className="text-right">
                                        <div className="text-sm font-medium text-gray-700">
                                          {durationHours}h disponibles
                                        </div>
                                        {slot.rate && (
                                          <div className="text-xs text-green-600">
                                            {slot.rate}€/h
                                          </div>
                                        )}
                                        <div className="text-xs text-gray-500">
                                          {isToday && 'Aujourd\'hui'}
                                          {isPast && 'Passé'}
                                        </div>
                                      </div>

                                      <Button
                                        variant="ghost"
                                        size="sm"
                                        onClick={() => removeCalendarAvailability(index)}
                                        className="text-red-500 hover:text-red-700 hover:bg-red-50 opacity-0 group-hover:opacity-100 transition-opacity"
                                      >
                                        <X className="w-4 h-4" />
                                      </Button>
                                    </div>
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      ) : (
                        <div className="text-center py-8">
                          <Calendar className="h-12 w-12 text-gray-400 mx-auto mb-3" />
                          <p className="text-gray-600 mb-2">Aucun créneau de disponibilité défini</p>
                          <p className="text-sm text-gray-500">
                            Ajoutez vos créneaux pour que les clients puissent vous contacter
                          </p>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </>
          )}

          </Tabs>

        <div className="flex justify-between items-center mt-8">
          <Button
            onClick={() => setShowAIAssistant(!showAIAssistant)}
            variant="outline"
            className="bg-gradient-to-r from-purple-50 to-blue-50 border-purple-200 text-purple-700 hover:from-purple-100 hover:to-blue-100"
          >
            <Brain className="w-4 h-4 mr-2" />
            {showAIAssistant ? 'Masquer' : 'Afficher'} l'Assistant IA
          </Button>

          <Button 
            onClick={handleSave}
            disabled={isSaving}
            className="bg-green-600 hover:bg-green-700 disabled:opacity-50"
          >
            {isSaving ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Sauvegarde...
              </>
            ) : (
              <>
                <Save className="w-4 h-4 mr-2" />
                Sauvegarder
              </>
            )}
          </Button>
        </div>

        {/* Assistant IA flottant */}
        {showAIAssistant && (
          <Card className="mt-6 border-2 border-purple-200 bg-gradient-to-r from-purple-50 to-blue-50">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-purple-800">
                <Brain className="h-5 w-5" />
                Assistant IA Global
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                <Button
                  onClick={handleAIKeywordSuggestion}
                  variant="outline"
                  className="border-purple-200 hover:bg-purple-50 text-purple-700"
                >
                  <Lightbulb className="h-4 w-4 mr-2" />
                  Suggérer mots-clés
                </Button>
                <Button
                  onClick={() => handleAITextImprovement('bio')}
                  variant="outline"
                  className="border-blue-200 hover:bg-blue-50 text-blue-700"
                >
                  <Sparkles className="h-4 w-4 mr-2" />
                  Améliorer description
                </Button>
                <Button
                  onClick={() => handleAIEnrichment('bio')}
                  variant="outline"
                  className="border-green-200 hover:bg-green-50 text-green-700"
                >
                  <Target className="h-4 w-4 mr-2" />
                  Enrichir profil
                </Button>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}